// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osmap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SerializedDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedPose_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedKeypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedKeypoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedKArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedKArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedMappoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedMappoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedMappointArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedMappointArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedKeyframe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedKeyframe_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedKeyframeArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedKeyframeArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedKeyframeFeatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedKeyframeFeatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedKeyframeFeaturesArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedKeyframeFeaturesArray_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osmap_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osmap_2eproto() {
  protobuf_AddDesc_osmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osmap.proto");
  GOOGLE_CHECK(file != NULL);
  SerializedDescriptor_descriptor_ = file->message_type(0);
  static const int SerializedDescriptor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedDescriptor, block_),
  };
  SerializedDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedDescriptor_descriptor_,
      SerializedDescriptor::default_instance_,
      SerializedDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedDescriptor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedDescriptor, _is_default_instance_));
  SerializedPose_descriptor_ = file->message_type(1);
  static const int SerializedPose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPose, element_),
  };
  SerializedPose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedPose_descriptor_,
      SerializedPose::default_instance_,
      SerializedPose_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedPose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPose, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPose, _is_default_instance_));
  SerializedPosition_descriptor_ = file->message_type(2);
  static const int SerializedPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPosition, z_),
  };
  SerializedPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedPosition_descriptor_,
      SerializedPosition::default_instance_,
      SerializedPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedPosition, _is_default_instance_));
  SerializedKeypoint_descriptor_ = file->message_type(3);
  static const int SerializedKeypoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeypoint, ptx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeypoint, pty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeypoint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeypoint, octave_),
  };
  SerializedKeypoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedKeypoint_descriptor_,
      SerializedKeypoint::default_instance_,
      SerializedKeypoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedKeypoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeypoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeypoint, _is_default_instance_));
  SerializedK_descriptor_ = file->message_type(4);
  static const int SerializedK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedK, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedK, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedK, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedK, cy_),
  };
  SerializedK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedK_descriptor_,
      SerializedK::default_instance_,
      SerializedK_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedK, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedK, _is_default_instance_));
  SerializedKArray_descriptor_ = file->message_type(5);
  static const int SerializedKArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKArray, k_),
  };
  SerializedKArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedKArray_descriptor_,
      SerializedKArray::default_instance_,
      SerializedKArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedKArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKArray, _is_default_instance_));
  SerializedMappoint_descriptor_ = file->message_type(6);
  static const int SerializedMappoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, briefdescriptor_),
  };
  SerializedMappoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedMappoint_descriptor_,
      SerializedMappoint::default_instance_,
      SerializedMappoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedMappoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappoint, _is_default_instance_));
  SerializedMappointArray_descriptor_ = file->message_type(7);
  static const int SerializedMappointArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappointArray, mappoint_),
  };
  SerializedMappointArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedMappointArray_descriptor_,
      SerializedMappointArray::default_instance_,
      SerializedMappointArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedMappointArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappointArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedMappointArray, _is_default_instance_));
  SerializedKeyframe_descriptor_ = file->message_type(8);
  static const int SerializedKeyframe_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, kmatrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, kindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, loopedgesids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, timestamp_),
  };
  SerializedKeyframe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedKeyframe_descriptor_,
      SerializedKeyframe::default_instance_,
      SerializedKeyframe_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedKeyframe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframe, _is_default_instance_));
  SerializedKeyframeArray_descriptor_ = file->message_type(9);
  static const int SerializedKeyframeArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeArray, keyframe_),
  };
  SerializedKeyframeArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedKeyframeArray_descriptor_,
      SerializedKeyframeArray::default_instance_,
      SerializedKeyframeArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedKeyframeArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeArray, _is_default_instance_));
  SerializedFeature_descriptor_ = file->message_type(10);
  static const int SerializedFeature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedFeature, mappoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedFeature, keypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedFeature, briefdescriptor_),
  };
  SerializedFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedFeature_descriptor_,
      SerializedFeature::default_instance_,
      SerializedFeature_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedFeature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedFeature, _is_default_instance_));
  SerializedKeyframeFeatures_descriptor_ = file->message_type(11);
  static const int SerializedKeyframeFeatures_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeatures, keyframe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeatures, feature_),
  };
  SerializedKeyframeFeatures_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedKeyframeFeatures_descriptor_,
      SerializedKeyframeFeatures::default_instance_,
      SerializedKeyframeFeatures_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedKeyframeFeatures),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeatures, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeatures, _is_default_instance_));
  SerializedKeyframeFeaturesArray_descriptor_ = file->message_type(12);
  static const int SerializedKeyframeFeaturesArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeaturesArray, feature_),
  };
  SerializedKeyframeFeaturesArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedKeyframeFeaturesArray_descriptor_,
      SerializedKeyframeFeaturesArray::default_instance_,
      SerializedKeyframeFeaturesArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedKeyframeFeaturesArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeaturesArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedKeyframeFeaturesArray, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedDescriptor_descriptor_, &SerializedDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedPose_descriptor_, &SerializedPose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedPosition_descriptor_, &SerializedPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedKeypoint_descriptor_, &SerializedKeypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedK_descriptor_, &SerializedK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedKArray_descriptor_, &SerializedKArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedMappoint_descriptor_, &SerializedMappoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedMappointArray_descriptor_, &SerializedMappointArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedKeyframe_descriptor_, &SerializedKeyframe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedKeyframeArray_descriptor_, &SerializedKeyframeArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedFeature_descriptor_, &SerializedFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedKeyframeFeatures_descriptor_, &SerializedKeyframeFeatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedKeyframeFeaturesArray_descriptor_, &SerializedKeyframeFeaturesArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osmap_2eproto() {
  delete SerializedDescriptor::default_instance_;
  delete SerializedDescriptor_reflection_;
  delete SerializedPose::default_instance_;
  delete SerializedPose_reflection_;
  delete SerializedPosition::default_instance_;
  delete SerializedPosition_reflection_;
  delete SerializedKeypoint::default_instance_;
  delete SerializedKeypoint_reflection_;
  delete SerializedK::default_instance_;
  delete SerializedK_reflection_;
  delete SerializedKArray::default_instance_;
  delete SerializedKArray_reflection_;
  delete SerializedMappoint::default_instance_;
  delete SerializedMappoint_reflection_;
  delete SerializedMappointArray::default_instance_;
  delete SerializedMappointArray_reflection_;
  delete SerializedKeyframe::default_instance_;
  delete SerializedKeyframe_reflection_;
  delete SerializedKeyframeArray::default_instance_;
  delete SerializedKeyframeArray_reflection_;
  delete SerializedFeature::default_instance_;
  delete SerializedFeature_reflection_;
  delete SerializedKeyframeFeatures::default_instance_;
  delete SerializedKeyframeFeatures_reflection_;
  delete SerializedKeyframeFeaturesArray::default_instance_;
  delete SerializedKeyframeFeaturesArray_reflection_;
}

void protobuf_AddDesc_osmap_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013osmap.proto\"%\n\024SerializedDescriptor\022\r\n"
    "\005block\030\001 \003(\007\"!\n\016SerializedPose\022\017\n\007elemen"
    "t\030\001 \003(\002\"5\n\022SerializedPosition\022\t\n\001x\030\001 \001(\002"
    "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"M\n\022SerializedKeyp"
    "oint\022\013\n\003ptx\030\001 \001(\002\022\013\n\003pty\030\002 \001(\002\022\r\n\005angle\030"
    "\003 \001(\002\022\016\n\006octave\030\004 \001(\002\"=\n\013SerializedK\022\n\n\002"
    "fx\030\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\n\n\002cx\030\003 \001(\002\022\n\n\002cy\030\004"
    " \001(\002\"+\n\020SerializedKArray\022\027\n\001k\030\001 \003(\0132\014.Se"
    "rializedK\"\227\001\n\022SerializedMappoint\022\n\n\002id\030\001"
    " \001(\r\022%\n\010position\030\002 \001(\0132\023.SerializedPosit"
    "ion\022\017\n\007visible\030\003 \001(\002\022\r\n\005found\030\004 \001(\002\022.\n\017b"
    "riefdescriptor\030\005 \001(\0132\025.SerializedDescrip"
    "tor\"@\n\027SerializedMappointArray\022%\n\010mappoi"
    "nt\030\001 \003(\0132\023.SerializedMappoint\"\227\001\n\022Serial"
    "izedKeyframe\022\n\n\002id\030\001 \001(\r\022\035\n\004pose\030\002 \001(\0132\017"
    ".SerializedPose\022\035\n\007kmatrix\030\003 \001(\0132\014.Seria"
    "lizedK\022\016\n\006kindex\030\004 \001(\r\022\024\n\014loopedgesids\030\005"
    " \003(\r\022\021\n\ttimestamp\030\006 \001(\001\"@\n\027SerializedKey"
    "frameArray\022%\n\010keyframe\030\001 \003(\0132\023.Serialize"
    "dKeyframe\"\177\n\021SerializedFeature\022\023\n\013mappoi"
    "nt_id\030\002 \001(\r\022%\n\010keypoint\030\003 \001(\0132\023.Serializ"
    "edKeypoint\022.\n\017briefdescriptor\030\004 \001(\0132\025.Se"
    "rializedDescriptor\"V\n\032SerializedKeyframe"
    "Features\022\023\n\013keyframe_id\030\001 \001(\r\022#\n\007feature"
    "\030\002 \003(\0132\022.SerializedFeature\"O\n\037Serialized"
    "KeyframeFeaturesArray\022,\n\007feature\030\001 \003(\0132\033"
    ".SerializedKeyframeFeaturesb\006proto3", 1075);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osmap.proto", &protobuf_RegisterTypes);
  SerializedDescriptor::default_instance_ = new SerializedDescriptor();
  SerializedPose::default_instance_ = new SerializedPose();
  SerializedPosition::default_instance_ = new SerializedPosition();
  SerializedKeypoint::default_instance_ = new SerializedKeypoint();
  SerializedK::default_instance_ = new SerializedK();
  SerializedKArray::default_instance_ = new SerializedKArray();
  SerializedMappoint::default_instance_ = new SerializedMappoint();
  SerializedMappointArray::default_instance_ = new SerializedMappointArray();
  SerializedKeyframe::default_instance_ = new SerializedKeyframe();
  SerializedKeyframeArray::default_instance_ = new SerializedKeyframeArray();
  SerializedFeature::default_instance_ = new SerializedFeature();
  SerializedKeyframeFeatures::default_instance_ = new SerializedKeyframeFeatures();
  SerializedKeyframeFeaturesArray::default_instance_ = new SerializedKeyframeFeaturesArray();
  SerializedDescriptor::default_instance_->InitAsDefaultInstance();
  SerializedPose::default_instance_->InitAsDefaultInstance();
  SerializedPosition::default_instance_->InitAsDefaultInstance();
  SerializedKeypoint::default_instance_->InitAsDefaultInstance();
  SerializedK::default_instance_->InitAsDefaultInstance();
  SerializedKArray::default_instance_->InitAsDefaultInstance();
  SerializedMappoint::default_instance_->InitAsDefaultInstance();
  SerializedMappointArray::default_instance_->InitAsDefaultInstance();
  SerializedKeyframe::default_instance_->InitAsDefaultInstance();
  SerializedKeyframeArray::default_instance_->InitAsDefaultInstance();
  SerializedFeature::default_instance_->InitAsDefaultInstance();
  SerializedKeyframeFeatures::default_instance_->InitAsDefaultInstance();
  SerializedKeyframeFeaturesArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osmap_2eproto {
  StaticDescriptorInitializer_osmap_2eproto() {
    protobuf_AddDesc_osmap_2eproto();
  }
} static_descriptor_initializer_osmap_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedDescriptor::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedDescriptor::SerializedDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedDescriptor)
}

void SerializedDescriptor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedDescriptor::SerializedDescriptor(const SerializedDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedDescriptor)
}

void SerializedDescriptor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedDescriptor::~SerializedDescriptor() {
  // @@protoc_insertion_point(destructor:SerializedDescriptor)
  SharedDtor();
}

void SerializedDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedDescriptor_descriptor_;
}

const SerializedDescriptor& SerializedDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedDescriptor* SerializedDescriptor::default_instance_ = NULL;

SerializedDescriptor* SerializedDescriptor::New(::google::protobuf::Arena* arena) const {
  SerializedDescriptor* n = new SerializedDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedDescriptor)
  block_.Clear();
}

bool SerializedDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 block = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_block())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 10, input, this->mutable_block())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedDescriptor)
  return false;
#undef DO_
}

void SerializedDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedDescriptor)
  // repeated fixed32 block = 1;
  if (this->block_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_block_cached_byte_size_);
  }
  for (int i = 0; i < this->block_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->block(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedDescriptor)
}

::google::protobuf::uint8* SerializedDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedDescriptor)
  // repeated fixed32 block = 1;
  if (this->block_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _block_cached_byte_size_, target);
  }
  for (int i = 0; i < this->block_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->block(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedDescriptor)
  return target;
}

int SerializedDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedDescriptor)
  int total_size = 0;

  // repeated fixed32 block = 1;
  {
    int data_size = 0;
    data_size = 4 * this->block_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _block_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedDescriptor)
    MergeFrom(*source);
  }
}

void SerializedDescriptor::MergeFrom(const SerializedDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  block_.MergeFrom(from.block_);
}

void SerializedDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedDescriptor::CopyFrom(const SerializedDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedDescriptor::IsInitialized() const {

  return true;
}

void SerializedDescriptor::Swap(SerializedDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedDescriptor::InternalSwap(SerializedDescriptor* other) {
  block_.UnsafeArenaSwap(&other->block_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedDescriptor_descriptor_;
  metadata.reflection = SerializedDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedDescriptor

// repeated fixed32 block = 1;
int SerializedDescriptor::block_size() const {
  return block_.size();
}
void SerializedDescriptor::clear_block() {
  block_.Clear();
}
 ::google::protobuf::uint32 SerializedDescriptor::block(int index) const {
  // @@protoc_insertion_point(field_get:SerializedDescriptor.block)
  return block_.Get(index);
}
 void SerializedDescriptor::set_block(int index, ::google::protobuf::uint32 value) {
  block_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedDescriptor.block)
}
 void SerializedDescriptor::add_block(::google::protobuf::uint32 value) {
  block_.Add(value);
  // @@protoc_insertion_point(field_add:SerializedDescriptor.block)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SerializedDescriptor::block() const {
  // @@protoc_insertion_point(field_list:SerializedDescriptor.block)
  return block_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SerializedDescriptor::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:SerializedDescriptor.block)
  return &block_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedPose::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedPose::SerializedPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedPose)
}

void SerializedPose::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedPose::SerializedPose(const SerializedPose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedPose)
}

void SerializedPose::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedPose::~SerializedPose() {
  // @@protoc_insertion_point(destructor:SerializedPose)
  SharedDtor();
}

void SerializedPose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedPose_descriptor_;
}

const SerializedPose& SerializedPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedPose* SerializedPose::default_instance_ = NULL;

SerializedPose* SerializedPose::New(::google::protobuf::Arena* arena) const {
  SerializedPose* n = new SerializedPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedPose::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedPose)
  element_.Clear();
}

bool SerializedPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float element = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedPose)
  return false;
#undef DO_
}

void SerializedPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedPose)
  // repeated float element = 1;
  if (this->element_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_element_cached_byte_size_);
  }
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedPose)
}

::google::protobuf::uint8* SerializedPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedPose)
  // repeated float element = 1;
  if (this->element_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _element_cached_byte_size_, target);
  }
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->element(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedPose)
  return target;
}

int SerializedPose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedPose)
  int total_size = 0;

  // repeated float element = 1;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _element_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedPose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedPose)
    MergeFrom(*source);
  }
}

void SerializedPose::MergeFrom(const SerializedPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
}

void SerializedPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedPose::CopyFrom(const SerializedPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedPose::IsInitialized() const {

  return true;
}

void SerializedPose::Swap(SerializedPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedPose::InternalSwap(SerializedPose* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedPose_descriptor_;
  metadata.reflection = SerializedPose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedPose

// repeated float element = 1;
int SerializedPose::element_size() const {
  return element_.size();
}
void SerializedPose::clear_element() {
  element_.Clear();
}
 float SerializedPose::element(int index) const {
  // @@protoc_insertion_point(field_get:SerializedPose.element)
  return element_.Get(index);
}
 void SerializedPose::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedPose.element)
}
 void SerializedPose::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:SerializedPose.element)
}
 const ::google::protobuf::RepeatedField< float >&
SerializedPose::element() const {
  // @@protoc_insertion_point(field_list:SerializedPose.element)
  return element_;
}
 ::google::protobuf::RepeatedField< float >*
SerializedPose::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:SerializedPose.element)
  return &element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedPosition::kXFieldNumber;
const int SerializedPosition::kYFieldNumber;
const int SerializedPosition::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedPosition::SerializedPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedPosition)
}

void SerializedPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedPosition::SerializedPosition(const SerializedPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedPosition)
}

void SerializedPosition::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

SerializedPosition::~SerializedPosition() {
  // @@protoc_insertion_point(destructor:SerializedPosition)
  SharedDtor();
}

void SerializedPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedPosition_descriptor_;
}

const SerializedPosition& SerializedPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedPosition* SerializedPosition::default_instance_ = NULL;

SerializedPosition* SerializedPosition::New(::google::protobuf::Arena* arena) const {
  SerializedPosition* n = new SerializedPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedPosition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerializedPosition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerializedPosition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool SerializedPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedPosition)
  return false;
#undef DO_
}

void SerializedPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedPosition)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedPosition)
}

::google::protobuf::uint8* SerializedPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedPosition)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedPosition)
  return target;
}

int SerializedPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedPosition)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedPosition)
    MergeFrom(*source);
  }
}

void SerializedPosition::MergeFrom(const SerializedPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void SerializedPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedPosition::CopyFrom(const SerializedPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedPosition::IsInitialized() const {

  return true;
}

void SerializedPosition::Swap(SerializedPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedPosition::InternalSwap(SerializedPosition* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedPosition_descriptor_;
  metadata.reflection = SerializedPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedPosition

// optional float x = 1;
void SerializedPosition::clear_x() {
  x_ = 0;
}
 float SerializedPosition::x() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.x)
  return x_;
}
 void SerializedPosition::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SerializedPosition.x)
}

// optional float y = 2;
void SerializedPosition::clear_y() {
  y_ = 0;
}
 float SerializedPosition::y() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.y)
  return y_;
}
 void SerializedPosition::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SerializedPosition.y)
}

// optional float z = 3;
void SerializedPosition::clear_z() {
  z_ = 0;
}
 float SerializedPosition::z() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.z)
  return z_;
}
 void SerializedPosition::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:SerializedPosition.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedKeypoint::kPtxFieldNumber;
const int SerializedKeypoint::kPtyFieldNumber;
const int SerializedKeypoint::kAngleFieldNumber;
const int SerializedKeypoint::kOctaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedKeypoint::SerializedKeypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedKeypoint)
}

void SerializedKeypoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedKeypoint::SerializedKeypoint(const SerializedKeypoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedKeypoint)
}

void SerializedKeypoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ptx_ = 0;
  pty_ = 0;
  angle_ = 0;
  octave_ = 0;
}

SerializedKeypoint::~SerializedKeypoint() {
  // @@protoc_insertion_point(destructor:SerializedKeypoint)
  SharedDtor();
}

void SerializedKeypoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedKeypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedKeypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedKeypoint_descriptor_;
}

const SerializedKeypoint& SerializedKeypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedKeypoint* SerializedKeypoint::default_instance_ = NULL;

SerializedKeypoint* SerializedKeypoint::New(::google::protobuf::Arena* arena) const {
  SerializedKeypoint* n = new SerializedKeypoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedKeypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeypoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerializedKeypoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerializedKeypoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ptx_, octave_);

#undef ZR_HELPER_
#undef ZR_

}

bool SerializedKeypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedKeypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ptx = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pty;
        break;
      }

      // optional float pty = 2;
      case 2: {
        if (tag == 21) {
         parse_pty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pty_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }

      // optional float angle = 3;
      case 3: {
        if (tag == 29) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_octave;
        break;
      }

      // optional float octave = 4;
      case 4: {
        if (tag == 37) {
         parse_octave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &octave_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedKeypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedKeypoint)
  return false;
#undef DO_
}

void SerializedKeypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedKeypoint)
  // optional float ptx = 1;
  if (this->ptx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ptx(), output);
  }

  // optional float pty = 2;
  if (this->pty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pty(), output);
  }

  // optional float angle = 3;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  // optional float octave = 4;
  if (this->octave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->octave(), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedKeypoint)
}

::google::protobuf::uint8* SerializedKeypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeypoint)
  // optional float ptx = 1;
  if (this->ptx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ptx(), target);
  }

  // optional float pty = 2;
  if (this->pty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pty(), target);
  }

  // optional float angle = 3;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  // optional float octave = 4;
  if (this->octave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->octave(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeypoint)
  return target;
}

int SerializedKeypoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeypoint)
  int total_size = 0;

  // optional float ptx = 1;
  if (this->ptx() != 0) {
    total_size += 1 + 4;
  }

  // optional float pty = 2;
  if (this->pty() != 0) {
    total_size += 1 + 4;
  }

  // optional float angle = 3;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // optional float octave = 4;
  if (this->octave() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedKeypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeypoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedKeypoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedKeypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeypoint)
    MergeFrom(*source);
  }
}

void SerializedKeypoint::MergeFrom(const SerializedKeypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeypoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ptx() != 0) {
    set_ptx(from.ptx());
  }
  if (from.pty() != 0) {
    set_pty(from.pty());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.octave() != 0) {
    set_octave(from.octave());
  }
}

void SerializedKeypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeypoint::CopyFrom(const SerializedKeypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeypoint::IsInitialized() const {

  return true;
}

void SerializedKeypoint::Swap(SerializedKeypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedKeypoint::InternalSwap(SerializedKeypoint* other) {
  std::swap(ptx_, other->ptx_);
  std::swap(pty_, other->pty_);
  std::swap(angle_, other->angle_);
  std::swap(octave_, other->octave_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedKeypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedKeypoint_descriptor_;
  metadata.reflection = SerializedKeypoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedKeypoint

// optional float ptx = 1;
void SerializedKeypoint::clear_ptx() {
  ptx_ = 0;
}
 float SerializedKeypoint::ptx() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.ptx)
  return ptx_;
}
 void SerializedKeypoint::set_ptx(float value) {
  
  ptx_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeypoint.ptx)
}

// optional float pty = 2;
void SerializedKeypoint::clear_pty() {
  pty_ = 0;
}
 float SerializedKeypoint::pty() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.pty)
  return pty_;
}
 void SerializedKeypoint::set_pty(float value) {
  
  pty_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeypoint.pty)
}

// optional float angle = 3;
void SerializedKeypoint::clear_angle() {
  angle_ = 0;
}
 float SerializedKeypoint::angle() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.angle)
  return angle_;
}
 void SerializedKeypoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeypoint.angle)
}

// optional float octave = 4;
void SerializedKeypoint::clear_octave() {
  octave_ = 0;
}
 float SerializedKeypoint::octave() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.octave)
  return octave_;
}
 void SerializedKeypoint::set_octave(float value) {
  
  octave_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeypoint.octave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedK::kFxFieldNumber;
const int SerializedK::kFyFieldNumber;
const int SerializedK::kCxFieldNumber;
const int SerializedK::kCyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedK::SerializedK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedK)
}

void SerializedK::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedK::SerializedK(const SerializedK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedK)
}

void SerializedK::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fx_ = 0;
  fy_ = 0;
  cx_ = 0;
  cy_ = 0;
}

SerializedK::~SerializedK() {
  // @@protoc_insertion_point(destructor:SerializedK)
  SharedDtor();
}

void SerializedK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedK_descriptor_;
}

const SerializedK& SerializedK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedK* SerializedK::default_instance_ = NULL;

SerializedK* SerializedK::New(::google::protobuf::Arena* arena) const {
  SerializedK* n = new SerializedK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedK::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerializedK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerializedK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fx_, cy_);

#undef ZR_HELPER_
#undef ZR_

}

bool SerializedK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float fx = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_fy;
        break;
      }

      // optional float fy = 2;
      case 2: {
        if (tag == 21) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cx;
        break;
      }

      // optional float cx = 3;
      case 3: {
        if (tag == 29) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cy;
        break;
      }

      // optional float cy = 4;
      case 4: {
        if (tag == 37) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedK)
  return false;
#undef DO_
}

void SerializedK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedK)
  // optional float fx = 1;
  if (this->fx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fx(), output);
  }

  // optional float fy = 2;
  if (this->fy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fy(), output);
  }

  // optional float cx = 3;
  if (this->cx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cx(), output);
  }

  // optional float cy = 4;
  if (this->cy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cy(), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedK)
}

::google::protobuf::uint8* SerializedK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedK)
  // optional float fx = 1;
  if (this->fx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fx(), target);
  }

  // optional float fy = 2;
  if (this->fy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fy(), target);
  }

  // optional float cx = 3;
  if (this->cx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cx(), target);
  }

  // optional float cy = 4;
  if (this->cy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedK)
  return target;
}

int SerializedK::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedK)
  int total_size = 0;

  // optional float fx = 1;
  if (this->fx() != 0) {
    total_size += 1 + 4;
  }

  // optional float fy = 2;
  if (this->fy() != 0) {
    total_size += 1 + 4;
  }

  // optional float cx = 3;
  if (this->cx() != 0) {
    total_size += 1 + 4;
  }

  // optional float cy = 4;
  if (this->cy() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedK* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedK)
    MergeFrom(*source);
  }
}

void SerializedK::MergeFrom(const SerializedK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fx() != 0) {
    set_fx(from.fx());
  }
  if (from.fy() != 0) {
    set_fy(from.fy());
  }
  if (from.cx() != 0) {
    set_cx(from.cx());
  }
  if (from.cy() != 0) {
    set_cy(from.cy());
  }
}

void SerializedK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedK::CopyFrom(const SerializedK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedK::IsInitialized() const {

  return true;
}

void SerializedK::Swap(SerializedK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedK::InternalSwap(SerializedK* other) {
  std::swap(fx_, other->fx_);
  std::swap(fy_, other->fy_);
  std::swap(cx_, other->cx_);
  std::swap(cy_, other->cy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedK_descriptor_;
  metadata.reflection = SerializedK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedK

// optional float fx = 1;
void SerializedK::clear_fx() {
  fx_ = 0;
}
 float SerializedK::fx() const {
  // @@protoc_insertion_point(field_get:SerializedK.fx)
  return fx_;
}
 void SerializedK::set_fx(float value) {
  
  fx_ = value;
  // @@protoc_insertion_point(field_set:SerializedK.fx)
}

// optional float fy = 2;
void SerializedK::clear_fy() {
  fy_ = 0;
}
 float SerializedK::fy() const {
  // @@protoc_insertion_point(field_get:SerializedK.fy)
  return fy_;
}
 void SerializedK::set_fy(float value) {
  
  fy_ = value;
  // @@protoc_insertion_point(field_set:SerializedK.fy)
}

// optional float cx = 3;
void SerializedK::clear_cx() {
  cx_ = 0;
}
 float SerializedK::cx() const {
  // @@protoc_insertion_point(field_get:SerializedK.cx)
  return cx_;
}
 void SerializedK::set_cx(float value) {
  
  cx_ = value;
  // @@protoc_insertion_point(field_set:SerializedK.cx)
}

// optional float cy = 4;
void SerializedK::clear_cy() {
  cy_ = 0;
}
 float SerializedK::cy() const {
  // @@protoc_insertion_point(field_get:SerializedK.cy)
  return cy_;
}
 void SerializedK::set_cy(float value) {
  
  cy_ = value;
  // @@protoc_insertion_point(field_set:SerializedK.cy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedKArray::kKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedKArray::SerializedKArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedKArray)
}

void SerializedKArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedKArray::SerializedKArray(const SerializedKArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedKArray)
}

void SerializedKArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedKArray::~SerializedKArray() {
  // @@protoc_insertion_point(destructor:SerializedKArray)
  SharedDtor();
}

void SerializedKArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedKArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedKArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedKArray_descriptor_;
}

const SerializedKArray& SerializedKArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedKArray* SerializedKArray::default_instance_ = NULL;

SerializedKArray* SerializedKArray::New(::google::protobuf::Arena* arena) const {
  SerializedKArray* n = new SerializedKArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedKArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKArray)
  k_.Clear();
}

bool SerializedKArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedKArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SerializedK k = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_k:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_k()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_k;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedKArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedKArray)
  return false;
#undef DO_
}

void SerializedKArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedKArray)
  // repeated .SerializedK k = 1;
  for (unsigned int i = 0, n = this->k_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->k(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedKArray)
}

::google::protobuf::uint8* SerializedKArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKArray)
  // repeated .SerializedK k = 1;
  for (unsigned int i = 0, n = this->k_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->k(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedKArray)
  return target;
}

int SerializedKArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKArray)
  int total_size = 0;

  // repeated .SerializedK k = 1;
  total_size += 1 * this->k_size();
  for (int i = 0; i < this->k_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->k(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedKArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedKArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedKArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKArray)
    MergeFrom(*source);
  }
}

void SerializedKArray::MergeFrom(const SerializedKArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  k_.MergeFrom(from.k_);
}

void SerializedKArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKArray::CopyFrom(const SerializedKArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKArray::IsInitialized() const {

  return true;
}

void SerializedKArray::Swap(SerializedKArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedKArray::InternalSwap(SerializedKArray* other) {
  k_.UnsafeArenaSwap(&other->k_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedKArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedKArray_descriptor_;
  metadata.reflection = SerializedKArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedKArray

// repeated .SerializedK k = 1;
int SerializedKArray::k_size() const {
  return k_.size();
}
void SerializedKArray::clear_k() {
  k_.Clear();
}
const ::SerializedK& SerializedKArray::k(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKArray.k)
  return k_.Get(index);
}
::SerializedK* SerializedKArray::mutable_k(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKArray.k)
  return k_.Mutable(index);
}
::SerializedK* SerializedKArray::add_k() {
  // @@protoc_insertion_point(field_add:SerializedKArray.k)
  return k_.Add();
}
::google::protobuf::RepeatedPtrField< ::SerializedK >*
SerializedKArray::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKArray.k)
  return &k_;
}
const ::google::protobuf::RepeatedPtrField< ::SerializedK >&
SerializedKArray::k() const {
  // @@protoc_insertion_point(field_list:SerializedKArray.k)
  return k_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedMappoint::kIdFieldNumber;
const int SerializedMappoint::kPositionFieldNumber;
const int SerializedMappoint::kVisibleFieldNumber;
const int SerializedMappoint::kFoundFieldNumber;
const int SerializedMappoint::kBriefdescriptorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedMappoint::SerializedMappoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedMappoint)
}

void SerializedMappoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::SerializedPosition*>(&::SerializedPosition::default_instance());
  briefdescriptor_ = const_cast< ::SerializedDescriptor*>(&::SerializedDescriptor::default_instance());
}

SerializedMappoint::SerializedMappoint(const SerializedMappoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedMappoint)
}

void SerializedMappoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  visible_ = 0;
  found_ = 0;
  briefdescriptor_ = NULL;
}

SerializedMappoint::~SerializedMappoint() {
  // @@protoc_insertion_point(destructor:SerializedMappoint)
  SharedDtor();
}

void SerializedMappoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete briefdescriptor_;
  }
}

void SerializedMappoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedMappoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedMappoint_descriptor_;
}

const SerializedMappoint& SerializedMappoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedMappoint* SerializedMappoint::default_instance_ = NULL;

SerializedMappoint* SerializedMappoint::New(::google::protobuf::Arena* arena) const {
  SerializedMappoint* n = new SerializedMappoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedMappoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedMappoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerializedMappoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerializedMappoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, visible_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  found_ = 0;
  if (GetArenaNoVirtual() == NULL && briefdescriptor_ != NULL) delete briefdescriptor_;
  briefdescriptor_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SerializedMappoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedMappoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .SerializedPosition position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_visible;
        break;
      }

      // optional float visible = 3;
      case 3: {
        if (tag == 29) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &visible_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_found;
        break;
      }

      // optional float found = 4;
      case 4: {
        if (tag == 37) {
         parse_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &found_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_briefdescriptor;
        break;
      }

      // optional .SerializedDescriptor briefdescriptor = 5;
      case 5: {
        if (tag == 42) {
         parse_briefdescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_briefdescriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedMappoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedMappoint)
  return false;
#undef DO_
}

void SerializedMappoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedMappoint)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .SerializedPosition position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional float visible = 3;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->visible(), output);
  }

  // optional float found = 4;
  if (this->found() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->found(), output);
  }

  // optional .SerializedDescriptor briefdescriptor = 5;
  if (this->has_briefdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->briefdescriptor_, output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedMappoint)
}

::google::protobuf::uint8* SerializedMappoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedMappoint)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .SerializedPosition position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional float visible = 3;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->visible(), target);
  }

  // optional float found = 4;
  if (this->found() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->found(), target);
  }

  // optional .SerializedDescriptor briefdescriptor = 5;
  if (this->has_briefdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->briefdescriptor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedMappoint)
  return target;
}

int SerializedMappoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedMappoint)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .SerializedPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional float visible = 3;
  if (this->visible() != 0) {
    total_size += 1 + 4;
  }

  // optional float found = 4;
  if (this->found() != 0) {
    total_size += 1 + 4;
  }

  // optional .SerializedDescriptor briefdescriptor = 5;
  if (this->has_briefdescriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->briefdescriptor_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedMappoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedMappoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedMappoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedMappoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedMappoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedMappoint)
    MergeFrom(*source);
  }
}

void SerializedMappoint::MergeFrom(const SerializedMappoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedMappoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_position()) {
    mutable_position()->::SerializedPosition::MergeFrom(from.position());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.found() != 0) {
    set_found(from.found());
  }
  if (from.has_briefdescriptor()) {
    mutable_briefdescriptor()->::SerializedDescriptor::MergeFrom(from.briefdescriptor());
  }
}

void SerializedMappoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedMappoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedMappoint::CopyFrom(const SerializedMappoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedMappoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedMappoint::IsInitialized() const {

  return true;
}

void SerializedMappoint::Swap(SerializedMappoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedMappoint::InternalSwap(SerializedMappoint* other) {
  std::swap(id_, other->id_);
  std::swap(position_, other->position_);
  std::swap(visible_, other->visible_);
  std::swap(found_, other->found_);
  std::swap(briefdescriptor_, other->briefdescriptor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedMappoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedMappoint_descriptor_;
  metadata.reflection = SerializedMappoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedMappoint

// optional uint32 id = 1;
void SerializedMappoint::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 SerializedMappoint::id() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.id)
  return id_;
}
 void SerializedMappoint::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SerializedMappoint.id)
}

// optional .SerializedPosition position = 2;
bool SerializedMappoint::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void SerializedMappoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::SerializedPosition& SerializedMappoint::position() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::SerializedPosition* SerializedMappoint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::SerializedPosition;
  }
  // @@protoc_insertion_point(field_mutable:SerializedMappoint.position)
  return position_;
}
::SerializedPosition* SerializedMappoint::release_position() {
  // @@protoc_insertion_point(field_release:SerializedMappoint.position)
  
  ::SerializedPosition* temp = position_;
  position_ = NULL;
  return temp;
}
void SerializedMappoint::set_allocated_position(::SerializedPosition* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializedMappoint.position)
}

// optional float visible = 3;
void SerializedMappoint::clear_visible() {
  visible_ = 0;
}
 float SerializedMappoint::visible() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.visible)
  return visible_;
}
 void SerializedMappoint::set_visible(float value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:SerializedMappoint.visible)
}

// optional float found = 4;
void SerializedMappoint::clear_found() {
  found_ = 0;
}
 float SerializedMappoint::found() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.found)
  return found_;
}
 void SerializedMappoint::set_found(float value) {
  
  found_ = value;
  // @@protoc_insertion_point(field_set:SerializedMappoint.found)
}

// optional .SerializedDescriptor briefdescriptor = 5;
bool SerializedMappoint::has_briefdescriptor() const {
  return !_is_default_instance_ && briefdescriptor_ != NULL;
}
void SerializedMappoint::clear_briefdescriptor() {
  if (GetArenaNoVirtual() == NULL && briefdescriptor_ != NULL) delete briefdescriptor_;
  briefdescriptor_ = NULL;
}
const ::SerializedDescriptor& SerializedMappoint::briefdescriptor() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.briefdescriptor)
  return briefdescriptor_ != NULL ? *briefdescriptor_ : *default_instance_->briefdescriptor_;
}
::SerializedDescriptor* SerializedMappoint::mutable_briefdescriptor() {
  
  if (briefdescriptor_ == NULL) {
    briefdescriptor_ = new ::SerializedDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:SerializedMappoint.briefdescriptor)
  return briefdescriptor_;
}
::SerializedDescriptor* SerializedMappoint::release_briefdescriptor() {
  // @@protoc_insertion_point(field_release:SerializedMappoint.briefdescriptor)
  
  ::SerializedDescriptor* temp = briefdescriptor_;
  briefdescriptor_ = NULL;
  return temp;
}
void SerializedMappoint::set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor) {
  delete briefdescriptor_;
  briefdescriptor_ = briefdescriptor;
  if (briefdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializedMappoint.briefdescriptor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedMappointArray::kMappointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedMappointArray::SerializedMappointArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedMappointArray)
}

void SerializedMappointArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedMappointArray::SerializedMappointArray(const SerializedMappointArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedMappointArray)
}

void SerializedMappointArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedMappointArray::~SerializedMappointArray() {
  // @@protoc_insertion_point(destructor:SerializedMappointArray)
  SharedDtor();
}

void SerializedMappointArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedMappointArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedMappointArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedMappointArray_descriptor_;
}

const SerializedMappointArray& SerializedMappointArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedMappointArray* SerializedMappointArray::default_instance_ = NULL;

SerializedMappointArray* SerializedMappointArray::New(::google::protobuf::Arena* arena) const {
  SerializedMappointArray* n = new SerializedMappointArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedMappointArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedMappointArray)
  mappoint_.Clear();
}

bool SerializedMappointArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedMappointArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SerializedMappoint mappoint = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mappoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mappoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mappoint;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedMappointArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedMappointArray)
  return false;
#undef DO_
}

void SerializedMappointArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedMappointArray)
  // repeated .SerializedMappoint mappoint = 1;
  for (unsigned int i = 0, n = this->mappoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mappoint(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedMappointArray)
}

::google::protobuf::uint8* SerializedMappointArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedMappointArray)
  // repeated .SerializedMappoint mappoint = 1;
  for (unsigned int i = 0, n = this->mappoint_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mappoint(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedMappointArray)
  return target;
}

int SerializedMappointArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedMappointArray)
  int total_size = 0;

  // repeated .SerializedMappoint mappoint = 1;
  total_size += 1 * this->mappoint_size();
  for (int i = 0; i < this->mappoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mappoint(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedMappointArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedMappointArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedMappointArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedMappointArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedMappointArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedMappointArray)
    MergeFrom(*source);
  }
}

void SerializedMappointArray::MergeFrom(const SerializedMappointArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedMappointArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mappoint_.MergeFrom(from.mappoint_);
}

void SerializedMappointArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedMappointArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedMappointArray::CopyFrom(const SerializedMappointArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedMappointArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedMappointArray::IsInitialized() const {

  return true;
}

void SerializedMappointArray::Swap(SerializedMappointArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedMappointArray::InternalSwap(SerializedMappointArray* other) {
  mappoint_.UnsafeArenaSwap(&other->mappoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedMappointArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedMappointArray_descriptor_;
  metadata.reflection = SerializedMappointArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedMappointArray

// repeated .SerializedMappoint mappoint = 1;
int SerializedMappointArray::mappoint_size() const {
  return mappoint_.size();
}
void SerializedMappointArray::clear_mappoint() {
  mappoint_.Clear();
}
const ::SerializedMappoint& SerializedMappointArray::mappoint(int index) const {
  // @@protoc_insertion_point(field_get:SerializedMappointArray.mappoint)
  return mappoint_.Get(index);
}
::SerializedMappoint* SerializedMappointArray::mutable_mappoint(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedMappointArray.mappoint)
  return mappoint_.Mutable(index);
}
::SerializedMappoint* SerializedMappointArray::add_mappoint() {
  // @@protoc_insertion_point(field_add:SerializedMappointArray.mappoint)
  return mappoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::SerializedMappoint >*
SerializedMappointArray::mutable_mappoint() {
  // @@protoc_insertion_point(field_mutable_list:SerializedMappointArray.mappoint)
  return &mappoint_;
}
const ::google::protobuf::RepeatedPtrField< ::SerializedMappoint >&
SerializedMappointArray::mappoint() const {
  // @@protoc_insertion_point(field_list:SerializedMappointArray.mappoint)
  return mappoint_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedKeyframe::kIdFieldNumber;
const int SerializedKeyframe::kPoseFieldNumber;
const int SerializedKeyframe::kKmatrixFieldNumber;
const int SerializedKeyframe::kKindexFieldNumber;
const int SerializedKeyframe::kLoopedgesidsFieldNumber;
const int SerializedKeyframe::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedKeyframe::SerializedKeyframe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedKeyframe)
}

void SerializedKeyframe::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::SerializedPose*>(&::SerializedPose::default_instance());
  kmatrix_ = const_cast< ::SerializedK*>(&::SerializedK::default_instance());
}

SerializedKeyframe::SerializedKeyframe(const SerializedKeyframe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframe)
}

void SerializedKeyframe::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  pose_ = NULL;
  kmatrix_ = NULL;
  kindex_ = 0u;
  timestamp_ = 0;
}

SerializedKeyframe::~SerializedKeyframe() {
  // @@protoc_insertion_point(destructor:SerializedKeyframe)
  SharedDtor();
}

void SerializedKeyframe::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete kmatrix_;
  }
}

void SerializedKeyframe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedKeyframe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedKeyframe_descriptor_;
}

const SerializedKeyframe& SerializedKeyframe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedKeyframe* SerializedKeyframe::default_instance_ = NULL;

SerializedKeyframe* SerializedKeyframe::New(::google::protobuf::Arena* arena) const {
  SerializedKeyframe* n = new SerializedKeyframe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedKeyframe::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframe)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerializedKeyframe, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerializedKeyframe*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, kindex_);
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && kmatrix_ != NULL) delete kmatrix_;
  kmatrix_ = NULL;
  timestamp_ = 0;

#undef ZR_HELPER_
#undef ZR_

  loopedgesids_.Clear();
}

bool SerializedKeyframe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedKeyframe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .SerializedPose pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_kmatrix;
        break;
      }

      // optional .SerializedK kmatrix = 3;
      case 3: {
        if (tag == 26) {
         parse_kmatrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kmatrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kindex;
        break;
      }

      // optional uint32 kindex = 4;
      case 4: {
        if (tag == 32) {
         parse_kindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loopedgesids;
        break;
      }

      // repeated uint32 loopedgesids = 5;
      case 5: {
        if (tag == 42) {
         parse_loopedgesids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_loopedgesids())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_loopedgesids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 6;
      case 6: {
        if (tag == 49) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedKeyframe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedKeyframe)
  return false;
#undef DO_
}

void SerializedKeyframe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedKeyframe)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .SerializedPose pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // optional .SerializedK kmatrix = 3;
  if (this->has_kmatrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->kmatrix_, output);
  }

  // optional uint32 kindex = 4;
  if (this->kindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kindex(), output);
  }

  // repeated uint32 loopedgesids = 5;
  if (this->loopedgesids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_loopedgesids_cached_byte_size_);
  }
  for (int i = 0; i < this->loopedgesids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->loopedgesids(i), output);
  }

  // optional double timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedKeyframe)
}

::google::protobuf::uint8* SerializedKeyframe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframe)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .SerializedPose pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // optional .SerializedK kmatrix = 3;
  if (this->has_kmatrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->kmatrix_, false, target);
  }

  // optional uint32 kindex = 4;
  if (this->kindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kindex(), target);
  }

  // repeated uint32 loopedgesids = 5;
  if (this->loopedgesids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _loopedgesids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->loopedgesids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->loopedgesids(i), target);
  }

  // optional double timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframe)
  return target;
}

int SerializedKeyframe::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframe)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .SerializedPose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // optional .SerializedK kmatrix = 3;
  if (this->has_kmatrix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kmatrix_);
  }

  // optional uint32 kindex = 4;
  if (this->kindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kindex());
  }

  // optional double timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // repeated uint32 loopedgesids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->loopedgesids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->loopedgesids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _loopedgesids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedKeyframe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedKeyframe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedKeyframe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframe)
    MergeFrom(*source);
  }
}

void SerializedKeyframe::MergeFrom(const SerializedKeyframe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  loopedgesids_.MergeFrom(from.loopedgesids_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_pose()) {
    mutable_pose()->::SerializedPose::MergeFrom(from.pose());
  }
  if (from.has_kmatrix()) {
    mutable_kmatrix()->::SerializedK::MergeFrom(from.kmatrix());
  }
  if (from.kindex() != 0) {
    set_kindex(from.kindex());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SerializedKeyframe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframe::CopyFrom(const SerializedKeyframe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframe::IsInitialized() const {

  return true;
}

void SerializedKeyframe::Swap(SerializedKeyframe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedKeyframe::InternalSwap(SerializedKeyframe* other) {
  std::swap(id_, other->id_);
  std::swap(pose_, other->pose_);
  std::swap(kmatrix_, other->kmatrix_);
  std::swap(kindex_, other->kindex_);
  loopedgesids_.UnsafeArenaSwap(&other->loopedgesids_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedKeyframe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedKeyframe_descriptor_;
  metadata.reflection = SerializedKeyframe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedKeyframe

// optional uint32 id = 1;
void SerializedKeyframe::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 SerializedKeyframe::id() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.id)
  return id_;
}
 void SerializedKeyframe::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeyframe.id)
}

// optional .SerializedPose pose = 2;
bool SerializedKeyframe::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void SerializedKeyframe::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::SerializedPose& SerializedKeyframe::pose() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::SerializedPose* SerializedKeyframe::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::SerializedPose;
  }
  // @@protoc_insertion_point(field_mutable:SerializedKeyframe.pose)
  return pose_;
}
::SerializedPose* SerializedKeyframe::release_pose() {
  // @@protoc_insertion_point(field_release:SerializedKeyframe.pose)
  
  ::SerializedPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void SerializedKeyframe::set_allocated_pose(::SerializedPose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializedKeyframe.pose)
}

// optional .SerializedK kmatrix = 3;
bool SerializedKeyframe::has_kmatrix() const {
  return !_is_default_instance_ && kmatrix_ != NULL;
}
void SerializedKeyframe::clear_kmatrix() {
  if (GetArenaNoVirtual() == NULL && kmatrix_ != NULL) delete kmatrix_;
  kmatrix_ = NULL;
}
const ::SerializedK& SerializedKeyframe::kmatrix() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.kmatrix)
  return kmatrix_ != NULL ? *kmatrix_ : *default_instance_->kmatrix_;
}
::SerializedK* SerializedKeyframe::mutable_kmatrix() {
  
  if (kmatrix_ == NULL) {
    kmatrix_ = new ::SerializedK;
  }
  // @@protoc_insertion_point(field_mutable:SerializedKeyframe.kmatrix)
  return kmatrix_;
}
::SerializedK* SerializedKeyframe::release_kmatrix() {
  // @@protoc_insertion_point(field_release:SerializedKeyframe.kmatrix)
  
  ::SerializedK* temp = kmatrix_;
  kmatrix_ = NULL;
  return temp;
}
void SerializedKeyframe::set_allocated_kmatrix(::SerializedK* kmatrix) {
  delete kmatrix_;
  kmatrix_ = kmatrix;
  if (kmatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializedKeyframe.kmatrix)
}

// optional uint32 kindex = 4;
void SerializedKeyframe::clear_kindex() {
  kindex_ = 0u;
}
 ::google::protobuf::uint32 SerializedKeyframe::kindex() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.kindex)
  return kindex_;
}
 void SerializedKeyframe::set_kindex(::google::protobuf::uint32 value) {
  
  kindex_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeyframe.kindex)
}

// repeated uint32 loopedgesids = 5;
int SerializedKeyframe::loopedgesids_size() const {
  return loopedgesids_.size();
}
void SerializedKeyframe::clear_loopedgesids() {
  loopedgesids_.Clear();
}
 ::google::protobuf::uint32 SerializedKeyframe::loopedgesids(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.loopedgesids)
  return loopedgesids_.Get(index);
}
 void SerializedKeyframe::set_loopedgesids(int index, ::google::protobuf::uint32 value) {
  loopedgesids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.loopedgesids)
}
 void SerializedKeyframe::add_loopedgesids(::google::protobuf::uint32 value) {
  loopedgesids_.Add(value);
  // @@protoc_insertion_point(field_add:SerializedKeyframe.loopedgesids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SerializedKeyframe::loopedgesids() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframe.loopedgesids)
  return loopedgesids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SerializedKeyframe::mutable_loopedgesids() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframe.loopedgesids)
  return &loopedgesids_;
}

// optional double timestamp = 6;
void SerializedKeyframe::clear_timestamp() {
  timestamp_ = 0;
}
 double SerializedKeyframe::timestamp() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.timestamp)
  return timestamp_;
}
 void SerializedKeyframe::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeyframe.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedKeyframeArray::kKeyframeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedKeyframeArray::SerializedKeyframeArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedKeyframeArray)
}

void SerializedKeyframeArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedKeyframeArray::SerializedKeyframeArray(const SerializedKeyframeArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframeArray)
}

void SerializedKeyframeArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedKeyframeArray::~SerializedKeyframeArray() {
  // @@protoc_insertion_point(destructor:SerializedKeyframeArray)
  SharedDtor();
}

void SerializedKeyframeArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedKeyframeArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedKeyframeArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedKeyframeArray_descriptor_;
}

const SerializedKeyframeArray& SerializedKeyframeArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedKeyframeArray* SerializedKeyframeArray::default_instance_ = NULL;

SerializedKeyframeArray* SerializedKeyframeArray::New(::google::protobuf::Arena* arena) const {
  SerializedKeyframeArray* n = new SerializedKeyframeArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedKeyframeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframeArray)
  keyframe_.Clear();
}

bool SerializedKeyframeArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedKeyframeArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SerializedKeyframe keyframe = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keyframe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keyframe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keyframe;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedKeyframeArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedKeyframeArray)
  return false;
#undef DO_
}

void SerializedKeyframeArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedKeyframeArray)
  // repeated .SerializedKeyframe keyframe = 1;
  for (unsigned int i = 0, n = this->keyframe_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keyframe(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedKeyframeArray)
}

::google::protobuf::uint8* SerializedKeyframeArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframeArray)
  // repeated .SerializedKeyframe keyframe = 1;
  for (unsigned int i = 0, n = this->keyframe_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keyframe(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframeArray)
  return target;
}

int SerializedKeyframeArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframeArray)
  int total_size = 0;

  // repeated .SerializedKeyframe keyframe = 1;
  total_size += 1 * this->keyframe_size();
  for (int i = 0; i < this->keyframe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyframe(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedKeyframeArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframeArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedKeyframeArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedKeyframeArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframeArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframeArray)
    MergeFrom(*source);
  }
}

void SerializedKeyframeArray::MergeFrom(const SerializedKeyframeArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframeArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keyframe_.MergeFrom(from.keyframe_);
}

void SerializedKeyframeArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframeArray::CopyFrom(const SerializedKeyframeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframeArray::IsInitialized() const {

  return true;
}

void SerializedKeyframeArray::Swap(SerializedKeyframeArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedKeyframeArray::InternalSwap(SerializedKeyframeArray* other) {
  keyframe_.UnsafeArenaSwap(&other->keyframe_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedKeyframeArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedKeyframeArray_descriptor_;
  metadata.reflection = SerializedKeyframeArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedKeyframeArray

// repeated .SerializedKeyframe keyframe = 1;
int SerializedKeyframeArray::keyframe_size() const {
  return keyframe_.size();
}
void SerializedKeyframeArray::clear_keyframe() {
  keyframe_.Clear();
}
const ::SerializedKeyframe& SerializedKeyframeArray::keyframe(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeArray.keyframe)
  return keyframe_.Get(index);
}
::SerializedKeyframe* SerializedKeyframeArray::mutable_keyframe(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeArray.keyframe)
  return keyframe_.Mutable(index);
}
::SerializedKeyframe* SerializedKeyframeArray::add_keyframe() {
  // @@protoc_insertion_point(field_add:SerializedKeyframeArray.keyframe)
  return keyframe_.Add();
}
::google::protobuf::RepeatedPtrField< ::SerializedKeyframe >*
SerializedKeyframeArray::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeArray.keyframe)
  return &keyframe_;
}
const ::google::protobuf::RepeatedPtrField< ::SerializedKeyframe >&
SerializedKeyframeArray::keyframe() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeArray.keyframe)
  return keyframe_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedFeature::kMappointIdFieldNumber;
const int SerializedFeature::kKeypointFieldNumber;
const int SerializedFeature::kBriefdescriptorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedFeature::SerializedFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedFeature)
}

void SerializedFeature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  keypoint_ = const_cast< ::SerializedKeypoint*>(&::SerializedKeypoint::default_instance());
  briefdescriptor_ = const_cast< ::SerializedDescriptor*>(&::SerializedDescriptor::default_instance());
}

SerializedFeature::SerializedFeature(const SerializedFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedFeature)
}

void SerializedFeature::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mappoint_id_ = 0u;
  keypoint_ = NULL;
  briefdescriptor_ = NULL;
}

SerializedFeature::~SerializedFeature() {
  // @@protoc_insertion_point(destructor:SerializedFeature)
  SharedDtor();
}

void SerializedFeature::SharedDtor() {
  if (this != default_instance_) {
    delete keypoint_;
    delete briefdescriptor_;
  }
}

void SerializedFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedFeature_descriptor_;
}

const SerializedFeature& SerializedFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedFeature* SerializedFeature::default_instance_ = NULL;

SerializedFeature* SerializedFeature::New(::google::protobuf::Arena* arena) const {
  SerializedFeature* n = new SerializedFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedFeature)
  mappoint_id_ = 0u;
  if (GetArenaNoVirtual() == NULL && keypoint_ != NULL) delete keypoint_;
  keypoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && briefdescriptor_ != NULL) delete briefdescriptor_;
  briefdescriptor_ = NULL;
}

bool SerializedFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mappoint_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mappoint_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keypoint;
        break;
      }

      // optional .SerializedKeypoint keypoint = 3;
      case 3: {
        if (tag == 26) {
         parse_keypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keypoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_briefdescriptor;
        break;
      }

      // optional .SerializedDescriptor briefdescriptor = 4;
      case 4: {
        if (tag == 34) {
         parse_briefdescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_briefdescriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedFeature)
  return false;
#undef DO_
}

void SerializedFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedFeature)
  // optional uint32 mappoint_id = 2;
  if (this->mappoint_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mappoint_id(), output);
  }

  // optional .SerializedKeypoint keypoint = 3;
  if (this->has_keypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keypoint_, output);
  }

  // optional .SerializedDescriptor briefdescriptor = 4;
  if (this->has_briefdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->briefdescriptor_, output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedFeature)
}

::google::protobuf::uint8* SerializedFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedFeature)
  // optional uint32 mappoint_id = 2;
  if (this->mappoint_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mappoint_id(), target);
  }

  // optional .SerializedKeypoint keypoint = 3;
  if (this->has_keypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keypoint_, false, target);
  }

  // optional .SerializedDescriptor briefdescriptor = 4;
  if (this->has_briefdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->briefdescriptor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedFeature)
  return target;
}

int SerializedFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedFeature)
  int total_size = 0;

  // optional uint32 mappoint_id = 2;
  if (this->mappoint_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mappoint_id());
  }

  // optional .SerializedKeypoint keypoint = 3;
  if (this->has_keypoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keypoint_);
  }

  // optional .SerializedDescriptor briefdescriptor = 4;
  if (this->has_briefdescriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->briefdescriptor_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedFeature)
    MergeFrom(*source);
  }
}

void SerializedFeature::MergeFrom(const SerializedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mappoint_id() != 0) {
    set_mappoint_id(from.mappoint_id());
  }
  if (from.has_keypoint()) {
    mutable_keypoint()->::SerializedKeypoint::MergeFrom(from.keypoint());
  }
  if (from.has_briefdescriptor()) {
    mutable_briefdescriptor()->::SerializedDescriptor::MergeFrom(from.briefdescriptor());
  }
}

void SerializedFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedFeature::CopyFrom(const SerializedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedFeature::IsInitialized() const {

  return true;
}

void SerializedFeature::Swap(SerializedFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedFeature::InternalSwap(SerializedFeature* other) {
  std::swap(mappoint_id_, other->mappoint_id_);
  std::swap(keypoint_, other->keypoint_);
  std::swap(briefdescriptor_, other->briefdescriptor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedFeature_descriptor_;
  metadata.reflection = SerializedFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedFeature

// optional uint32 mappoint_id = 2;
void SerializedFeature::clear_mappoint_id() {
  mappoint_id_ = 0u;
}
 ::google::protobuf::uint32 SerializedFeature::mappoint_id() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.mappoint_id)
  return mappoint_id_;
}
 void SerializedFeature::set_mappoint_id(::google::protobuf::uint32 value) {
  
  mappoint_id_ = value;
  // @@protoc_insertion_point(field_set:SerializedFeature.mappoint_id)
}

// optional .SerializedKeypoint keypoint = 3;
bool SerializedFeature::has_keypoint() const {
  return !_is_default_instance_ && keypoint_ != NULL;
}
void SerializedFeature::clear_keypoint() {
  if (GetArenaNoVirtual() == NULL && keypoint_ != NULL) delete keypoint_;
  keypoint_ = NULL;
}
const ::SerializedKeypoint& SerializedFeature::keypoint() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.keypoint)
  return keypoint_ != NULL ? *keypoint_ : *default_instance_->keypoint_;
}
::SerializedKeypoint* SerializedFeature::mutable_keypoint() {
  
  if (keypoint_ == NULL) {
    keypoint_ = new ::SerializedKeypoint;
  }
  // @@protoc_insertion_point(field_mutable:SerializedFeature.keypoint)
  return keypoint_;
}
::SerializedKeypoint* SerializedFeature::release_keypoint() {
  // @@protoc_insertion_point(field_release:SerializedFeature.keypoint)
  
  ::SerializedKeypoint* temp = keypoint_;
  keypoint_ = NULL;
  return temp;
}
void SerializedFeature::set_allocated_keypoint(::SerializedKeypoint* keypoint) {
  delete keypoint_;
  keypoint_ = keypoint;
  if (keypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializedFeature.keypoint)
}

// optional .SerializedDescriptor briefdescriptor = 4;
bool SerializedFeature::has_briefdescriptor() const {
  return !_is_default_instance_ && briefdescriptor_ != NULL;
}
void SerializedFeature::clear_briefdescriptor() {
  if (GetArenaNoVirtual() == NULL && briefdescriptor_ != NULL) delete briefdescriptor_;
  briefdescriptor_ = NULL;
}
const ::SerializedDescriptor& SerializedFeature::briefdescriptor() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.briefdescriptor)
  return briefdescriptor_ != NULL ? *briefdescriptor_ : *default_instance_->briefdescriptor_;
}
::SerializedDescriptor* SerializedFeature::mutable_briefdescriptor() {
  
  if (briefdescriptor_ == NULL) {
    briefdescriptor_ = new ::SerializedDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:SerializedFeature.briefdescriptor)
  return briefdescriptor_;
}
::SerializedDescriptor* SerializedFeature::release_briefdescriptor() {
  // @@protoc_insertion_point(field_release:SerializedFeature.briefdescriptor)
  
  ::SerializedDescriptor* temp = briefdescriptor_;
  briefdescriptor_ = NULL;
  return temp;
}
void SerializedFeature::set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor) {
  delete briefdescriptor_;
  briefdescriptor_ = briefdescriptor;
  if (briefdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SerializedFeature.briefdescriptor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedKeyframeFeatures::kKeyframeIdFieldNumber;
const int SerializedKeyframeFeatures::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedKeyframeFeatures::SerializedKeyframeFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedKeyframeFeatures)
}

void SerializedKeyframeFeatures::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedKeyframeFeatures::SerializedKeyframeFeatures(const SerializedKeyframeFeatures& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframeFeatures)
}

void SerializedKeyframeFeatures::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  keyframe_id_ = 0u;
}

SerializedKeyframeFeatures::~SerializedKeyframeFeatures() {
  // @@protoc_insertion_point(destructor:SerializedKeyframeFeatures)
  SharedDtor();
}

void SerializedKeyframeFeatures::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedKeyframeFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedKeyframeFeatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedKeyframeFeatures_descriptor_;
}

const SerializedKeyframeFeatures& SerializedKeyframeFeatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedKeyframeFeatures* SerializedKeyframeFeatures::default_instance_ = NULL;

SerializedKeyframeFeatures* SerializedKeyframeFeatures::New(::google::protobuf::Arena* arena) const {
  SerializedKeyframeFeatures* n = new SerializedKeyframeFeatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedKeyframeFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframeFeatures)
  keyframe_id_ = 0u;
  feature_.Clear();
}

bool SerializedKeyframeFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedKeyframeFeatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keyframe_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyframe_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feature;
        break;
      }

      // repeated .SerializedFeature feature = 2;
      case 2: {
        if (tag == 18) {
         parse_feature:
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedKeyframeFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedKeyframeFeatures)
  return false;
#undef DO_
}

void SerializedKeyframeFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedKeyframeFeatures)
  // optional uint32 keyframe_id = 1;
  if (this->keyframe_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keyframe_id(), output);
  }

  // repeated .SerializedFeature feature = 2;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feature(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedKeyframeFeatures)
}

::google::protobuf::uint8* SerializedKeyframeFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframeFeatures)
  // optional uint32 keyframe_id = 1;
  if (this->keyframe_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keyframe_id(), target);
  }

  // repeated .SerializedFeature feature = 2;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->feature(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframeFeatures)
  return target;
}

int SerializedKeyframeFeatures::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframeFeatures)
  int total_size = 0;

  // optional uint32 keyframe_id = 1;
  if (this->keyframe_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keyframe_id());
  }

  // repeated .SerializedFeature feature = 2;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedKeyframeFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframeFeatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedKeyframeFeatures* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedKeyframeFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframeFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframeFeatures)
    MergeFrom(*source);
  }
}

void SerializedKeyframeFeatures::MergeFrom(const SerializedKeyframeFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframeFeatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feature_.MergeFrom(from.feature_);
  if (from.keyframe_id() != 0) {
    set_keyframe_id(from.keyframe_id());
  }
}

void SerializedKeyframeFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframeFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframeFeatures::CopyFrom(const SerializedKeyframeFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframeFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframeFeatures::IsInitialized() const {

  return true;
}

void SerializedKeyframeFeatures::Swap(SerializedKeyframeFeatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedKeyframeFeatures::InternalSwap(SerializedKeyframeFeatures* other) {
  std::swap(keyframe_id_, other->keyframe_id_);
  feature_.UnsafeArenaSwap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedKeyframeFeatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedKeyframeFeatures_descriptor_;
  metadata.reflection = SerializedKeyframeFeatures_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedKeyframeFeatures

// optional uint32 keyframe_id = 1;
void SerializedKeyframeFeatures::clear_keyframe_id() {
  keyframe_id_ = 0u;
}
 ::google::protobuf::uint32 SerializedKeyframeFeatures::keyframe_id() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeatures.keyframe_id)
  return keyframe_id_;
}
 void SerializedKeyframeFeatures::set_keyframe_id(::google::protobuf::uint32 value) {
  
  keyframe_id_ = value;
  // @@protoc_insertion_point(field_set:SerializedKeyframeFeatures.keyframe_id)
}

// repeated .SerializedFeature feature = 2;
int SerializedKeyframeFeatures::feature_size() const {
  return feature_.size();
}
void SerializedKeyframeFeatures::clear_feature() {
  feature_.Clear();
}
const ::SerializedFeature& SerializedKeyframeFeatures::feature(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeatures.feature)
  return feature_.Get(index);
}
::SerializedFeature* SerializedKeyframeFeatures::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeFeatures.feature)
  return feature_.Mutable(index);
}
::SerializedFeature* SerializedKeyframeFeatures::add_feature() {
  // @@protoc_insertion_point(field_add:SerializedKeyframeFeatures.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::SerializedFeature >*
SerializedKeyframeFeatures::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeFeatures.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::SerializedFeature >&
SerializedKeyframeFeatures::feature() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeFeatures.feature)
  return feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedKeyframeFeaturesArray::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedKeyframeFeaturesArray::SerializedKeyframeFeaturesArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerializedKeyframeFeaturesArray)
}

void SerializedKeyframeFeaturesArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedKeyframeFeaturesArray::SerializedKeyframeFeaturesArray(const SerializedKeyframeFeaturesArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SerializedKeyframeFeaturesArray)
}

void SerializedKeyframeFeaturesArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedKeyframeFeaturesArray::~SerializedKeyframeFeaturesArray() {
  // @@protoc_insertion_point(destructor:SerializedKeyframeFeaturesArray)
  SharedDtor();
}

void SerializedKeyframeFeaturesArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedKeyframeFeaturesArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedKeyframeFeaturesArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedKeyframeFeaturesArray_descriptor_;
}

const SerializedKeyframeFeaturesArray& SerializedKeyframeFeaturesArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osmap_2eproto();
  return *default_instance_;
}

SerializedKeyframeFeaturesArray* SerializedKeyframeFeaturesArray::default_instance_ = NULL;

SerializedKeyframeFeaturesArray* SerializedKeyframeFeaturesArray::New(::google::protobuf::Arena* arena) const {
  SerializedKeyframeFeaturesArray* n = new SerializedKeyframeFeaturesArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedKeyframeFeaturesArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SerializedKeyframeFeaturesArray)
  feature_.Clear();
}

bool SerializedKeyframeFeaturesArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SerializedKeyframeFeaturesArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SerializedKeyframeFeatures feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SerializedKeyframeFeaturesArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SerializedKeyframeFeaturesArray)
  return false;
#undef DO_
}

void SerializedKeyframeFeaturesArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SerializedKeyframeFeaturesArray)
  // repeated .SerializedKeyframeFeatures feature = 1;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feature(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SerializedKeyframeFeaturesArray)
}

::google::protobuf::uint8* SerializedKeyframeFeaturesArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerializedKeyframeFeaturesArray)
  // repeated .SerializedKeyframeFeatures feature = 1;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->feature(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SerializedKeyframeFeaturesArray)
  return target;
}

int SerializedKeyframeFeaturesArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SerializedKeyframeFeaturesArray)
  int total_size = 0;

  // repeated .SerializedKeyframeFeatures feature = 1;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedKeyframeFeaturesArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerializedKeyframeFeaturesArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedKeyframeFeaturesArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedKeyframeFeaturesArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerializedKeyframeFeaturesArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerializedKeyframeFeaturesArray)
    MergeFrom(*source);
  }
}

void SerializedKeyframeFeaturesArray::MergeFrom(const SerializedKeyframeFeaturesArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerializedKeyframeFeaturesArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feature_.MergeFrom(from.feature_);
}

void SerializedKeyframeFeaturesArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerializedKeyframeFeaturesArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedKeyframeFeaturesArray::CopyFrom(const SerializedKeyframeFeaturesArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerializedKeyframeFeaturesArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKeyframeFeaturesArray::IsInitialized() const {

  return true;
}

void SerializedKeyframeFeaturesArray::Swap(SerializedKeyframeFeaturesArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedKeyframeFeaturesArray::InternalSwap(SerializedKeyframeFeaturesArray* other) {
  feature_.UnsafeArenaSwap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedKeyframeFeaturesArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedKeyframeFeaturesArray_descriptor_;
  metadata.reflection = SerializedKeyframeFeaturesArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedKeyframeFeaturesArray

// repeated .SerializedKeyframeFeatures feature = 1;
int SerializedKeyframeFeaturesArray::feature_size() const {
  return feature_.size();
}
void SerializedKeyframeFeaturesArray::clear_feature() {
  feature_.Clear();
}
const ::SerializedKeyframeFeatures& SerializedKeyframeFeaturesArray::feature(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeaturesArray.feature)
  return feature_.Get(index);
}
::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeFeaturesArray.feature)
  return feature_.Mutable(index);
}
::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::add_feature() {
  // @@protoc_insertion_point(field_add:SerializedKeyframeFeaturesArray.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::SerializedKeyframeFeatures >*
SerializedKeyframeFeaturesArray::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeFeaturesArray.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::SerializedKeyframeFeatures >&
SerializedKeyframeFeaturesArray::feature() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeFeaturesArray.feature)
  return feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
